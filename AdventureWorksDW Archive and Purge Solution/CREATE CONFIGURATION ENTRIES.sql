USE master
GO
IF EXISTS (SELECT * FROM SYS.sysdatabases WHERE name = 'AdventureWorksDW2017_Archive') 
ALTER DATABASE AdventureWorksDW2017_Archive SET  SINGLE_USER WITH ROLLBACK IMMEDIATE 
GO 
IF EXISTS (SELECT * FROM SYS.sysdatabases WHERE name = 'AdventureWorksDW2017_Archive') 
DROP DATABASE AdventureWorksDW2017_Archive 
GO 
--CLONE AdventureWorksDW2017 Database and NAME it as "AdventureWorksDW2017_Archive" - you can change if you like BUT MAKE SURE YOU GIVE same in the line number 25 as archive db value
DBCC CLONEDATABASE(AdventureWorksDW2017,AdventureWorksDW2017_Archive)  
--did you get the error while executing the Clone database? --check the matched object_id's between model and AdventureWorksDW2017 databases, drop and recreate the object (user/role)
GO 
--SET DB TO WRITE
ALTER DATABASE [AdventureWorksDW2017_Archive] SET  READ_WRITE WITH NO_WAIT 
GO 
--Create configuration table to keep retention period and batch sizes (number of days - need to )
USE AdventureWorksDW2017
GO
IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA= 'dbo' AND TABLE_NAME = 'ArchiveFactTablesConfig') DROP TABLE  [dbo].[ArchiveFactTablesConfig]
GO
CREATE TABLE [dbo].[ArchiveFactTablesConfig] (ID INT IDENTITY(1,1) PRIMARY KEY, ONLINE_DB SYSNAME, TABLE_SCHEMA SYSNAME,TABLE_NAME SYSNAME,FILTER_COLUMN SYSNAME,KEY_COLUMNS NVARCHAR(MAX), RETENTION_PERIOD INT,BATCH_SIZE INT,ARCHIVE_DB SYSNAME,LINKEDSERVER SYSNAME NULL)
GO
INSERT [dbo].[ArchiveFactTablesConfig]  (ONLINE_DB,TABLE_SCHEMA,TABLE_NAME,FILTER_COLUMN,KEY_COLUMNS,RETENTION_PERIOD,BATCH_SIZE,ARCHIVE_DB,LINKEDSERVER)
SELECT ALL_TAB.TABLE_CATALOG,ALL_TAB.TABLE_SCHEMA,ALL_TAB.TABLE_NAME,ALL_TAB.COLUMN_NAME,COALESCE(IDENT_KEYS.COLUMN_NAME,NON_IDENT_KEYS.COLUMN_NAME,UNIQUE_KEYS.COLUMN_NAME)  
,3225,1000000,'AdventureWorksDW2017_Archive',NULL -- LINKEDSERVER is  needed to provide only if Archive database is kept in another sql instance (make sure you create a linked server) 
FROM
(SELECT A.TABLE_CATALOG,A.TABLE_SCHEMA,A.TABLE_NAME,B.COLUMN_NAME
FROM AdventureWorksDW2017.INFORMATION_SCHEMA.TABLES A 
JOIN AdventureWorksDW2017.INFORMATION_SCHEMA.COLUMNS B ON A.TABLE_NAME = B.TABLE_NAME AND A.TABLE_SCHEMA = B.TABLE_SCHEMA
WHERE A.table_name like 'fact%'  --get all the tables starts with fact
AND TABLE_TYPE = 'BASE TABLE'
AND (COLUMN_NAME = 'Date' OR COLUMN_NAME ='OrderDate')
) ALL_TAB
--GET IDENTITY KEYS 
LEFT JOIN (
SELECT DISTINCT b.TABLE_SCHEMA,b.TABLE_NAME,B.COLUMN_NAME
FROM AdventureWorksDW2017.INFORMATION_SCHEMA.TABLE_CONSTRAINTS A 
JOIN AdventureWorksDW2017.INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE B ON A.TABLE_NAME = B.TABLE_NAME AND A.CONSTRAINT_SCHEMA = B.CONSTRAINT_SCHEMA AND A.CONSTRAINT_NAME = B.CONSTRAINT_NAME 
WHERE CONSTRAINT_TYPE IN ( 'PRIMARY KEY', 'UNIQUE') AND  COLUMNPROPERTY(OBJECT_ID(QUOTENAME(B.TABLE_SCHEMA) + '.' + QUOTENAME(B.TABLE_NAME)), B.COLUMN_NAME, 'ISIDENTITY') = 1
) IDENT_KEYS ON ALL_TAB.TABLE_SCHEMA = IDENT_KEYS.TABLE_SCHEMA AND ALL_TAB.TABLE_NAME = IDENT_KEYS.TABLE_NAME 
----NON IDENT  BUT IDENTITY KEY
LEFT JOIN (
SELECT DISTINCT b.TABLE_SCHEMA,b.TABLE_NAME,
STUFF(REPLACE((SELECT '~~' + QUOTENAME(COLUMN_NAME) AS 'data()' FROM  AdventureWorksDW2017.INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CCU
WHERE CCU.CONSTRAINT_NAME = B.CONSTRAINT_NAME 
FOR XML PATH('')),'~~',', '), 1, 2, '') as [COLUMN_NAME]
FROM AdventureWorksDW2017.INFORMATION_SCHEMA.TABLE_CONSTRAINTS A 
JOIN AdventureWorksDW2017.INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE B ON A.TABLE_NAME = B.TABLE_NAME AND A.CONSTRAINT_SCHEMA = B.CONSTRAINT_SCHEMA AND A.CONSTRAINT_NAME = B.CONSTRAINT_NAME 
WHERE CONSTRAINT_TYPE IN ( 'PRIMARY KEY')  AND  COLUMNPROPERTY(OBJECT_ID(QUOTENAME(B.TABLE_SCHEMA) + '.' + QUOTENAME(B.TABLE_NAME)), B.COLUMN_NAME, 'ISIDENTITY') <> 1
) NON_IDENT_KEYS ON ALL_TAB.TABLE_SCHEMA = NON_IDENT_KEYS.TABLE_SCHEMA AND ALL_TAB.TABLE_NAME = NON_IDENT_KEYS.TABLE_NAME  
--GET THE UNIQUE KEYS NOW 
LEFT JOIN (
SELECT DISTINCT b.TABLE_SCHEMA,b.TABLE_NAME,
STUFF(REPLACE((SELECT '~~' + QUOTENAME(COLUMN_NAME) AS 'data()' FROM  AdventureWorksDW2017.INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CCU
WHERE CCU.CONSTRAINT_NAME = B.CONSTRAINT_NAME 
FOR XML PATH('')),'~~',', '), 1, 2, '') as [COLUMN_NAME]
FROM AdventureWorksDW2017.INFORMATION_SCHEMA.TABLE_CONSTRAINTS A 
JOIN AdventureWorksDW2017.INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE B ON A.TABLE_NAME = B.TABLE_NAME AND A.CONSTRAINT_SCHEMA = B.CONSTRAINT_SCHEMA AND A.CONSTRAINT_NAME = B.CONSTRAINT_NAME 
WHERE CONSTRAINT_TYPE IN ( 'UNIQUE')   
) UNIQUE_KEYS ON ALL_TAB.TABLE_SCHEMA = UNIQUE_KEYS.TABLE_SCHEMA AND ALL_TAB.TABLE_NAME = UNIQUE_KEYS.TABLE_NAME
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'BUCKET_GROUP' AND TABLE_NAME = 'ArchiveFactTablesConfig' AND TABLE_SCHEMA = 'dbo' )
ALTER TABLE dbo.[ArchiveFactTablesConfig] ADD BUCKET_GROUP SYSNAME 
GO
UPDATE dbo.[ArchiveFactTablesConfig]
SET BUCKET_GROUP = CASE	WHEN TABLE_NAME LIKE 'fact%sales%'  THEN 'Sales'
		WHEN TABLE_NAME LIKE 'fact%product%' THEN 'Product'
		WHEN TABLE_NAME LIKE 'fact%Finance%' THEN 'Finance'
		WHEN TABLE_NAME LIKE 'fact%Survey%'  THEN 'Survey'
	 ELSE 'OTHERS' END 
GO
--THIS FUNCTION WOULD BE USEFUL WHILE PURGING THE DATA
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_TYPE = 'FUNCTION' AND ROUTINE_NAME = 'fnSplit')
DROP FUNCTION [dbo].[fnSplit]
GO
CREATE FUNCTION  [dbo].[fnSplit](
    @sInputList VARCHAR(8000) -- List of delimited items
  , @sDelimiter VARCHAR(8000) = ',' -- delimiter that separates items
) RETURNS @List TABLE (item VARCHAR(8000))

BEGIN
DECLARE @sItem VARCHAR(8000)
WHILE CHARINDEX(@sDelimiter,@sInputList,0) <> 0
 BEGIN
 SELECT
  @sItem=RTRIM(LTRIM(SUBSTRING(@sInputList,1,CHARINDEX(@sDelimiter,@sInputList,0)-1))),
  @sInputList=RTRIM(LTRIM(SUBSTRING(@sInputList,CHARINDEX(@sDelimiter,@sInputList,0)+LEN(@sDelimiter),LEN(@sInputList))))
 
 IF LEN(@sItem) > 0
  INSERT INTO @List SELECT @sItem
 END

IF LEN(@sInputList) > 0
 INSERT INTO @List SELECT @sInputList 
RETURN
END

GO
--ADD LOGGING TABLE
IF EXISTS (SELECT  * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AdventureWorksDW_Archive_Log' AND TABLE_SCHEMA = 'dbo')
DROP TABLE dbo.AdventureWorksDW_Archive_Log
GO
CREATE TABLE dbo.AdventureWorksDW_Archive_Log (ID INT IDENTITY(1,1) PRIMARY KEY,TABLE_SCHEMA SYSNAME,TABLE_NAME SYSNAME,PURGED_DATE DATE,ROWCNT INT,BATCH_SIZE INT,StartAt DATETIME,EndAt DATETIME)
GO 
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'ISACTIVE' AND TABLE_NAME = 'ArchiveFactTablesConfig' AND TABLE_SCHEMA = 'dbo')
ALTER TABLE dbo.[ArchiveFactTablesConfig] ADD ISACTIVE BIT
GO 
UPDATE dbo.[ArchiveFactTablesConfig]  SET ISACTIVE =1
UPDATE dbo.[ArchiveFactTablesConfig]  SET KEY_COLUMNS   = 'FinanceKey' WHERE TABLE_NAME = 'FactFinance'
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'LAST_UPDATE' AND TABLE_NAME = 'ArchiveFactTablesConfig' AND TABLE_SCHEMA = 'dbo' )
ALTER TABLE dbo.[ArchiveFactTablesConfig] ADD LAST_UPDATE DATETIME
GO 
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'LAST_OUTCOME' AND TABLE_NAME = 'ArchiveFactTablesConfig' AND TABLE_SCHEMA = 'dbo' )
ALTER TABLE dbo.[ArchiveFactTablesConfig] ADD LAST_OUTCOME NVARCHAR(MAX)
GO  
USE AdventureWorksDW2017 
GO
-- Disable all constraints for database
EXEC sp_msforeachtable "ALTER TABLE ? NOCHECK CONSTRAINT all"
GO

USE AdventureWorksDW2017_Archive
GO
-- Disable all constraints for database
EXEC sp_msforeachtable "ALTER TABLE ? NOCHECK CONSTRAINT all"
GO